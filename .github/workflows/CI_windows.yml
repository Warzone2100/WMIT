name: Windows

on:
  push:
  pull_request:

jobs:
  build-win:
    name: Windows
    runs-on: windows-latest
    env:
      MSVC_BAT: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

    steps:
    - uses: actions/checkout@v2
    - name: Refresh submodules
      run: git submodule update --init --recursive
    - name: Download Qt
      # Reference script is at https://github.com/cristianadam/qtcreator-doxygen
      env:
        QT_VERSION: 5.15.0
      id: qt
      shell: cmake -P {0}
      run: |
        set(qt_version $ENV{QT_VERSION})
        string(REPLACE "." "" qt_version_dotless "${qt_version}")
        set(url_os "windows_x86")
        if ("${{ env.MSVC_BAT }}" MATCHES "vcvars64.bat")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.win64_msvc2019_64")
          set(qt_dir_prefix "${qt_version}/msvc2019_64")
        elseif ("${{ env.MSVC_BAT }}" MATCHES "vcvars32.bat")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.win32_msvc2019")
          set(qt_dir_prefix "${qt_version}/msvc2019")
        else()
          message(FATAL_ERROR "Bad MSVC script!")
        endif()
        set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt5_${qt_version_dotless}")
        file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)
        file(READ ./Updates.xml updates_xml)
        string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
          updates_xml_output "${updates_xml}")
        set(package_version ${CMAKE_MATCH_1})
        set(package_suffix ${CMAKE_MATCH_2})
        string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")
        # Workaround for CMake's greedy regex
        if ("${{ env.MSVC_BAT }}" MATCHES "vcvars32.bat")
          string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
        endif()
        file(MAKE_DIRECTORY qt5)
        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt5/${qt_dir_prefix}" qt_dir)
        message("::set-output name=qt_dir::${qt_dir}")
        file(TO_NATIVE_PATH "$ENV{GITHUB_WORKSPACE}/qt5/${qt_dir_prefix}" qt_dir_native)
        message("::set-output name=qt_dir_native::${qt_dir_native}")        
        foreach(package qtbase qttools qtsvg)
          file(DOWNLOAD
            "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" ./${package}.7z
            SHOW_PROGRESS
          )
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY qt5)
        endforeach()
        file(READ "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
        string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
        string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
        file(WRITE "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")
    - name: Setup MSVC environment, configure and build
      env:
        CmakeGeneratorToUse: "Visual Studio 16 2019"
        QT5_DIR: ${{ steps.qt.outputs.qt_dir_native }}
      shell: cmd
      run: |
        call "${{ env.MSVC_BAT }}"
        set PATH=%PATH%;${{ steps.qt.outputs.qt_dir_native }}\bin;
        "C:\Program Files\PowerShell\7\pwsh.EXE" -command ". .\configure_win.ps1"
        msbuild build/x64/PACKAGE.vcxproj /p:Configuration=Release
    - name: Archive installer
      uses: actions/upload-artifact@v2
      with:
        name: wmit-setup-win64
        path: build/x64/wmit.exe*

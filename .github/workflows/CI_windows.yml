name: Windows

on:
  push:
    branches-ignore:
      - 'l10n_**' # Push events to translation service branches (that begin with "l10n_")
    # Sequence of patterns matched against refs/tags
    tags:
      - '*'
  pull_request:
     # Match all pull requests

jobs:
  windows-build:
    strategy:
      matrix:
        compiler: ["MSVC_2019"]
        architecture: ["x86", "x64"]
      fail-fast: false
    env:
      WZ_MSVC_VER: ${{ matrix.compiler }}
      WZ_TARGET_ARCH: ${{ matrix.architecture }}
      VSCMD_SKIP_SENDTELEMETRY: 1
    name: '${{ matrix.architecture }} [${{ matrix.compiler }}]'
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Generate Settings for Run [${{ matrix.compiler }}:${{ matrix.architecture }}]
      id: settings
      run: |
        # Basic variable setup
        # --------------------

        $WZ_VC_TARGET_PLATFORMNAME = "$env:WZ_TARGET_ARCH"
        $WZ_BUILD_DESC = "win_${env:WZ_TARGET_ARCH}"

        if ($env:WZ_TARGET_ARCH -eq "x86") {
          $VCPKG_DEFAULT_TRIPLET = "x86-windows"
          $WZ_VC_TARGET_PLATFORMNAME = "Win32" # special case, map "x86" -> "Win32"
          $QTCI_ARCH = "win32_msvc2019"
        }
        elseif ($env:WZ_TARGET_ARCH -eq "x64") {
          $VCPKG_DEFAULT_TRIPLET = "x64-windows"
          $QTCI_ARCH = "win64_msvc2019_64"
        }

        # ------------------------------
        # MSVC version / generator info

        $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
        if ($env:WZ_MSVC_VER -eq "MSVC_2019") {
          $WZ_VC_GENERATOR = "Visual Studio 16 2019"
          #$env:WZ_VC_TOOLCHAIN = "v142"
          # Get the installation path for a specific version of MSVC (2019)
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath -version "[16.0,17.0)"
          if ($LastExitCode -ne 0)
          {
            echo "::warning ::Could not find MSVC 2019"
            $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
          }
        }
        elseif ($env:WZ_MSVC_VER -eq "MSVC_2017") {
          $WZ_VC_GENERATOR = "Visual Studio 15 2017"
          #$env:WZ_VC_TOOLCHAIN = "v141"
          # Get the installation path for a specific version of MSVC (2017)
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath -version "[15.0,16.0)"
          if ($LastExitCode -ne 0)
          {
            echo "::warning ::Could not find MSVC 2017"
            $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
          }
        }

        if ([string]::IsNullOrWhitespace(${WZ_VISUAL_STUDIO_INSTALL_PATH}))
        {
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath
          echo "::warning ::Default to 'latest' MSVC: `"${WZ_VISUAL_STUDIO_INSTALL_PATH}`""
        }

        $VCPKG_VISUAL_STUDIO_PATH = "${WZ_VISUAL_STUDIO_INSTALL_PATH}"
        #$CMAKE_GENERATOR_INSTANCE = "${WZ_VISUAL_STUDIO_INSTALL_PATH}"

        # -------------
        # Distributor

        $WZ_DISTRIBUTOR = "UNKNOWN"
        if (${env:GITHUB_REPOSITORY} -eq "Warzone2100/WMIT") {
          $WZ_DISTRIBUTOR = "wz2100.net"
        }

        # ----------------
        # Determine which matrix combinations to deploy

        $WZ_DEPLOY_RELEASE = 'false'
        if ($env:WZ_MSVC_VER -eq "MSVC_2019") {
            $WZ_DEPLOY_RELEASE = 'true'
        }

        # ----------------
        # Export Variables

        # Export everything important to environment variables (for future steps)
        echo "VCPKG_DEFAULT_TRIPLET=${VCPKG_DEFAULT_TRIPLET}" >> $GITHUB_ENV
        echo "WZ_VC_TARGET_PLATFORMNAME=${WZ_VC_TARGET_PLATFORMNAME}" >> $GITHUB_ENV
        echo "WZ_BUILD_DESC=${WZ_BUILD_DESC}" >> $GITHUB_ENV
        echo "TCI_ARCH=${QTCI_ARCH}" >> $GITHUB_ENV
        echo "::set-output name=QTCI_ARCH::${QTCI_ARCH}"
        echo "WZ_VC_GENERATOR=${WZ_VC_GENERATOR}" >> $GITHUB_ENV
        #echo "WZ_VC_TOOLCHAIN=${WZ_VC_TOOLCHAIN}" >> $GITHUB_ENV
        echo "WZ_VISUAL_STUDIO_INSTALL_PATH=${WZ_VISUAL_STUDIO_INSTALL_PATH}" >> $GITHUB_ENV
        echo "VCPKG_VISUAL_STUDIO_PATH=${VCPKG_VISUAL_STUDIO_PATH}" >> $GITHUB_ENV
        echo "WZ_DISTRIBUTOR=${WZ_DISTRIBUTOR}" >> $GITHUB_ENV
        echo "::set-output name=WZ_DEPLOY_RELEASE::${WZ_DEPLOY_RELEASE}"
    - name: Install Qt
      uses: jurplel/install-qt-action@v2.7.2
      with:
        version: 5.12.9
        arch: ${{ steps.settings.outputs.QTCI_ARCH }}
        dir: 'C:/Qt'
    - name: Verify Qt install + version
      run: |
        Write-Host "Qt version:"
        & "qmake" -version
    - name: Create directories
      run: |
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\build"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\installer"
    - name: Setup MSVC environment, configure and build
      env:
        CmakeGeneratorToUse: ${{ env.WZ_VC_GENERATOR }}
        WZ_REPO_PATH: '.'
      run: |
        . "${env:WZ_REPO_PATH}\.ci\powershell\importVCvars.ps1"
        Import-VCVarsEnv "${env:WZ_VISUAL_STUDIO_INSTALL_PATH}" "-arch=${env:WZ_TARGET_ARCH} -host_arch=x64"
        $env:Platform = "${{ matrix.architecture }}"

        powershell ".\configure_win.ps1"
        msbuild build/${{ matrix.architecture }}/PACKAGE.vcxproj /p:Configuration=Release

        # Rename the installer
        Move-Item -LiteralPath ".\build\${{ matrix.architecture }}\wmit.exe" -Destination "${{ github.workspace }}\output\installer\wmit_$($env:WZ_BUILD_DESC).exe"
    - name: Output Debug Info
      working-directory: '${{ github.workspace }}\output'
      run: |
        # Log hashes of the build artifacts
        Write-Host "SHA512 Hashes:"
        Write-Host "`nwmit_$($env:WZ_BUILD_DESC).exe`n`t-> SHA512: $((Get-FileHash -LiteralPath ".\installer\wmit_$($env:WZ_BUILD_DESC).exe" -Algorithm SHA512).Hash)`n`t`-> Size (bytes): $((Get-Item -LiteralPath ".\installer\wmit_$($env:WZ_BUILD_DESC).exe").Length)"
        Write-Host ""
    #####################################################
    # Upload build artifacts
    #####################################################
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: wmit_win_${{ matrix.architecture }}
        path: '${{ github.workspace }}\output\installer'
    #####################################################
    # Upload Release assets (if a release tag)
    #####################################################
    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/') && (steps.settings.outputs.WZ_DEPLOY_RELEASE == 'true') && (github.repository == 'Warzone2100/WMIT')
      uses: past-due/action-gh-release@v1
      with:
        # Do not explicitly specify a tag_name, so this action takes the github.ref and parses it for just the tag
        files: |
          ${{ github.workspace }}\output\installer\*.exe
        # draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

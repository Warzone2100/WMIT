name: macOS

on:
  push:
    branches-ignore:
      - 'l10n_**' # Push events to translation service branches (that begin with "l10n_")
    # Sequence of patterns matched against refs/tags
    tags:
      - '*'
  pull_request:
     # Match all pull requests

jobs:
  macos-build:
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.12
      VSCMD_SKIP_SENDTELEMETRY: 1
    name: 'Xcode :LATEST'
    runs-on: macos-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Pre-reqs
      run: |
        brew install gnu-getopt
    - name: Install Qt
      uses: jurplel/install-qt-action@v2.7.2
      with:
        version: 5.12.9
    - name: Verify Qt install + version
      run: |
        echo "Qt version:"
        qmake -version
    - name: Create directories
      run: |
        OUTPUT_DIR="${HOME}/output"
        echo "OUTPUT_DIR=${OUTPUT_DIR}"
        echo "::set-env name=OUTPUT_DIR::${OUTPUT_DIR}"
        mkdir -p "${OUTPUT_DIR}"
    - name: Configure
      run: |
        # Run configure_macOS.sh
        ./configure_macOS.sh
    - name: Build WMIT
      run: |
        # Build Xcode project, and package "WMIT.zip"
        xcodebuild  \
         -project build/wmit.xcodeproj \
         -target "package" \
         -configuration "Release" \
         -destination "platform=macOS" \
         -PBXBuildsContinueAfterErrors=NO
        result=${?}
        if [ $result -ne 0 ]; then
        	echo "ERROR: xcodebuild failed"
        	exit ${result}
        fi

        # Verify "WMIT.zip" was created
        BUILT_WMIT_ZIP="build/WMIT.zip"
        if [ ! -f "${BUILT_WMIT_ZIP}" ]; then
        	echo "ERROR: Something went wrong, and \"${BUILT_WMIT_ZIP}\" does not exist"
        	exit 1
        fi

        # Rename the output
        WMIT_OUTPUT_ZIP="${OUTPUT_DIR}/wmit_macOS.zip"
        mv "./build/WMIT.zip" "${WMIT_OUTPUT_ZIP}"
        echo "WMIT_OUTPUT_ZIP=${WMIT_OUTPUT_ZIP}"
        echo "::set-env name=WMIT_OUTPUT_ZIP::${WMIT_OUTPUT_ZIP}"
    - name: Output Debug Info
      shell: sh {0}
      run: |
        # Extract & verify the .zip contents
        TMP_PKG_EXTRACT_DIR="build/tmp/_wzextract"
        rm -rf "${TMP_PKG_EXTRACT_DIR}"
        if [ ! -d "${TMP_PKG_EXTRACT_DIR}" ]; then
        	mkdir -p "${TMP_PKG_EXTRACT_DIR}"
        fi
        unzip -qq "${WMIT_OUTPUT_ZIP}" -d "${TMP_PKG_EXTRACT_DIR}"
        cd "${TMP_PKG_EXTRACT_DIR}"
        if [ ! -d "WMIT.app" ]; then
        	echo "ERROR: \"WMIT.app\" was not extracted from \"${WMIT_OUTPUT_ZIP}\""
        	exit 1
        fi
        # For debugging purposes, output some information about the generated "WMIT.app" (inside the .zip)
        echo "Generated \"WMIT.app\""
        generated_infoplist_location="WMIT.app/Contents/Info.plist"
        generated_versionnumber=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${generated_infoplist_location}")
        echo "  -> Version Number (CFBundleShortVersionString): ${generated_versionnumber}"
        generated_buildnumber=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${generated_infoplist_location}")
        echo "  -> Build Number (CFBundleVersion): ${generated_buildnumber}"
        generated_minimumsystemversion=$(/usr/libexec/PlistBuddy -c "Print LSMinimumSystemVersion" "${generated_infoplist_location}")
        echo "  -> Minimum macOS (LSMinimumSystemVersion): ${generated_minimumsystemversion}"
        codesign_verify_result=$(codesign --verify --deep --strict --verbose=2 "WMIT.app" 2>&1)
        echo "  -> codesign --verify --deep --strict --verbose=2 \"WMIT.app\""
        if [ -n "${codesign_verify_result}" ]; then
        	while read -r line; do
        		echo "     $line"
        	done <<< "$codesign_verify_result"
        else
        	echo "     (No output?)"
        fi
        cd - > /dev/null
        # Output .zip info
        echo "Generated WMIT .zip: \"${WMIT_OUTPUT_ZIP}\""
        ZIP_HASH="$(shasum -a 512 "${WMIT_OUTPUT_ZIP}")"
        ZIP_SIZE="$(stat -f '%z' "${WMIT_OUTPUT_ZIP}")"
        echo "  -> SHA512: ${ZIP_HASH}"
        echo "  -> Size (bytes): ${ZIP_SIZE}"
        exit 0
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: wmit_macOS
        path: '${{ env.WMIT_OUTPUT_ZIP }}'
    #####################################################
    # Upload Release assets (if a release tag)
    #####################################################
    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/') && (github.repository == 'Warzone2100/WMIT')
      uses: past-due/action-gh-release@v1
      with:
        # Do not explicitly specify a tag_name, so this action takes the github.ref and parses it for just the tag
        files: |
          ${{ env.WMIT_OUTPUT_ZIP }}
        # draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

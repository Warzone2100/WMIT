init:
  # Only save build cache on master branch
  - ps: IF ($env:APPVEYOR_REPO_BRANCH -ne "master") {$env:APPVEYOR_CACHE_SKIP_SAVE = "true"}

environment:
  global:
    APPVEYOR_CACHE_ENTRY_ZIP_ARGS: -t7z -m0=lzma -mx=4
  matrix:
  # 32-bit (x86) builds
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    WZ_JOB_ID: release_x86
    # NOTE: Additional environment variables are set later to maintain consistent job identifiers
  # 64-bit (x64) builds
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    WZ_JOB_ID: release_x64

platform:
  - x64

configuration:
  - Release

install:
  # Initialize Git submodules
  - git submodule update --init --recursive

before_build:
  # Set expanded environment variables for release build jobs
  # NOTE: These are set here, instead of in the build matrix above, to maintain consistent job identifiers for release builds
  #       (as the job is identified based on the environment configuration in the matrix)
  - ps: |
      if ($env:WZ_JOB_ID -eq "release_x86") {
        # 32-bit (x86) builds use more recent Qt and the latest VC toolchain (and support Windows 7+)
        # APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        $env:QT5DIR = "C:\Qt\5.9\msvc2015"
        $env:WZ_OUTPUT_PLATFORMNAME = "x86"
        $env:WZ_VCVARS_BAT = "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat"
      }
      elseif ($env:WZ_JOB_ID -eq "release_x64") {
        # 64-bit (x64) builds use the latest Qt and VC toolchain (and support Windows 7+)
        # APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        $env:QT5DIR = "C:\Qt\5.9\msvc2017_64"
        $env:WZ_OUTPUT_PLATFORMNAME = "x64"
        $env:WZ_VCVARS_BAT = "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
      }
  # Set distributor (if building from the main repo)
  - ps: |
      $env:WZ_DISTRIBUTOR = "UNKNOWN"
      if ($env:APPVEYOR_ACCOUNT_NAME -eq "Warzone2100") {
        $env:WZ_DISTRIBUTOR = "wz2100.net"
      }
  # Execute the appropriate vcvars*.bat
  - call "%WZ_VCVARS_BAT%"
  # Add the QT5 \bin dir to PATH
  - set PATH=%PATH%;%QT5DIR%\bin;
  # configure_win.ps1 does a lot of the heavy lifting
  - ps: .\configure_win.ps1

build:
  parallel: true
  project: build/%WZ_OUTPUT_PLATFORMNAME%/PACKAGE.vcxproj

after_build:
  # Determine the build output description (nightly vs tag/release builds)
  # For nightly builds, base on the autorevision info: warzone2100-<BRANCH>-<DATE>-<TIME>-<COMMIT_FIRST_7>_<PLATFORM: x86, x64>_<PORTABLE/INSTALLER>.zip
  # For tags/releases, base on the tag name: warzone2100-<TAG_NAME>_<PLATFORM>_<PORTABLE/INSTALLER>.zip (so it can go right to GitHub releases)
  - ps: |
      if (Test-Path 'env:APPVEYOR_REPO_TAG_NAME') {
        # For tag builds, simply use <TAG_NAME>_<PLATFORM>
        $env:WZ_BUILD_DESC = "$($env:APPVEYOR_REPO_TAG_NAME)_$($env:WZ_OUTPUT_PLATFORMNAME)"
      }
      else {
        # For normal builds, use <BRANCH>-<DATE>-<TIME>-<COMMIT_FIRST_7>-<PLATFORM: x86, x64>
        $env:WZ_BUILD_DESC = "$($env:APPVEYOR_REPO_BRANCH)-$(get-date -f yyyyMMdd-HHmmss)-$($env:APPVEYOR_REPO_COMMIT.SubString(0,7))_$($env:WZ_OUTPUT_PLATFORMNAME)"
      }
      $env:WZ_ZIP_DESC = "$($env:APPVEYOR_REPO_BRANCH)_$($env:WZ_OUTPUT_PLATFORMNAME)"
      # Convert special characters
      $env:WZ_BUILD_DESC = $env:WZ_BUILD_DESC.replace('/','_')
      $env:WZ_ZIP_DESC = $env:WZ_ZIP_DESC.replace('/','_')
  - ps: Write-Host "env:WZ_BUILD_DESC='$env:WZ_BUILD_DESC'"

  # Package the installer into a zip
  - ps: cmd /c 7z a "wmit-$($env:WZ_ZIP_DESC)_installer.zip" "$($env:APPVEYOR_BUILD_FOLDER)\build\$($env:WZ_OUTPUT_PLATFORMNAME)\wmit.exe"
  # Rename the installer inside the zip using the WZ_BUILD_DESC (to preserve the commit + other info)
  - ps: cmd /c 7z rn "wmit-$($env:WZ_ZIP_DESC)_installer.zip" "wmit.exe" "wmit-$($env:WZ_BUILD_DESC)_setup.exe"
  
  # Log hashes of the setup EXEs (stored inside the ZIP files)
  - ps: |
      Write-Host "SHA512 Hashes:"
      Write-Host "`nwmit-$($env:WZ_BUILD_DESC)_setup.exe`n  -> SHA512: $((Get-FileHash -LiteralPath "$($env:APPVEYOR_BUILD_FOLDER)\build\$($env:WZ_OUTPUT_PLATFORMNAME)\wmit.exe" -Algorithm SHA512).Hash)`n  -> Size (bytes): $((Get-Item -LiteralPath "$($env:APPVEYOR_BUILD_FOLDER)\build\$($env:WZ_OUTPUT_PLATFORMNAME)\wmit.exe").Length)"
      Write-Host ""

artifacts:
  - path: wmit-*_installer.zip
    name: WMIT Installer
